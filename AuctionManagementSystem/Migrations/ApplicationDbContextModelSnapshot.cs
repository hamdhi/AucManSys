// <auto-generated />
using System;
using AuctionManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuctionManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BidId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Category", b =>
                {
                    b.Property<int>("Cat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cat_Id"));

                    b.Property<string>("Cat_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cat_Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Cat_Id = 1,
                            Cat_Name = "Electronics"
                        },
                        new
                        {
                            Cat_Id = 2,
                            Cat_Name = "Fashion"
                        },
                        new
                        {
                            Cat_Id = 3,
                            Cat_Name = "Home and Furniture"
                        });
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.ConfirmedProduct", b =>
                {
                    b.Property<int>("Confirmed_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Confirmed_Id"));

                    b.Property<string>("ConfirmedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Confirmed_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Confirmed_Id");

                    b.HasIndex("Product_Id")
                        .IsUnique();

                    b.ToTable("ConfirmedProducts");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_Id"));

                    b.Property<int>("Cat_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Confirmed_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Min_Bid_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_Id");

                    b.HasIndex("Cat_Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Product_Id = 1,
                            Cat_Id = 1,
                            Description = "Latest model smartphone",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 300.00m,
                            Photo = "/images/smartphone.webp",
                            Product_Name = "Smartphone",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 2,
                            Cat_Id = 1,
                            Description = "High performance laptop",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 800.00m,
                            Photo = "/images/laptop.jpg",
                            Product_Name = "Laptop",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 6,
                            Cat_Id = 2,
                            Description = "Comfortable cotton T-shirt",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 20.00m,
                            Photo = "/images/tshirt.webp",
                            Product_Name = "T-shirt",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 7,
                            Cat_Id = 2,
                            Description = "Stylish blue jeans",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 40.00m,
                            Photo = "/images/jeans.webp",
                            Product_Name = "Jeans",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 11,
                            Cat_Id = 3,
                            Description = "Comfortable 3-seater sofa",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 300.00m,
                            Photo = "/images/sofa.webp",
                            Product_Name = "Sofa",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 12,
                            Cat_Id = 3,
                            Description = "Wooden dining table",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 250.00m,
                            Photo = "/images/diningtable.webp",
                            Product_Name = "Dining Table",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 16,
                            Cat_Id = 1,
                            Description = "Action figure of Batman",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 25.00m,
                            Photo = "/images/batman.jpg",
                            Product_Name = "Batman Action Figure",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Product_Id = 17,
                            Cat_Id = 1,
                            Description = "Action figure of Superman",
                            End_Date = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Min_Bid_Price = 25.00m,
                            Photo = "/images/superman.webp",
                            Product_Name = "Superman Action Figure",
                            Start_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.UserAuth", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("userAuths");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            IsActive = true,
                            PasswordHash = "$2a$12$JAqHJvucSzrKae/dNlwdEOdZTMp25cU1vM44EVTFyEVzawknBeeb2",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seller@example.com",
                            IsActive = true,
                            PasswordHash = "$2a$12$5.y8Oqufam1aHHF.M3xro.LQ9zLrAVWGwUrHWDIZrr2s4SnuchNJm",
                            Role = "Seller",
                            Username = "seller"
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bidder@example.com",
                            IsActive = true,
                            PasswordHash = "$2a$12$EZ7ueJR1feYJWSGEPe37tOkki/e43/P2.xAd4rMcSwZQldBIwZzAS",
                            Role = "Bidder",
                            Username = "bidder"
                        });
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Bid", b =>
                {
                    b.HasOne("AuctionManagementSystem.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionManagementSystem.Models.Entities.UserAuth", "UserAuth")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserAuth");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.ConfirmedProduct", b =>
                {
                    b.HasOne("AuctionManagementSystem.Models.Entities.Product", "Product")
                        .WithOne("Confirmed")
                        .HasForeignKey("AuctionManagementSystem.Models.Entities.ConfirmedProduct", "Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Product", b =>
                {
                    b.HasOne("AuctionManagementSystem.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Cat_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AuctionManagementSystem.Models.Entities.Product", b =>
                {
                    b.Navigation("Confirmed");
                });
#pragma warning restore 612, 618
        }
    }
}
